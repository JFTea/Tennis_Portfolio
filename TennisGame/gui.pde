/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.
 
 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
 // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void startButtonClick(GButton source, GEvent event) { //_CODE_:StartButton:532462:
  //Changes the state to the Character selection screen
  changeState(6);
} //_CODE_:StartButton:532462:

public void titleQuitButtonClick(GButton source, GEvent event) { //_CODE_:QuitButton:790339:
  //Quits the game
  exit();
} //_CODE_:QuitButton:790339:

public void resumeButtonClick(GButton source, GEvent event) { //_CODE_:ResumeButton:582144:
  //Changes the state to the match state
  changeState(1);
  ResumeButton.setVisible(false);
  OptionsQuit.setVisible(false);
} //_CODE_:ResumeButton:582144:

public void optionsQuitButtonClick(GButton source, GEvent event) { //_CODE_:OptionsQuit:451126:
  //Checks if it is a tournament and if the match is over, if it is then it goes back to the tournament state if not it goes to main menu
  if (tournamentActive && currentMatch.matchOver)
  {
    changeState(5);
    tournamentMenu.updateTournament();
  } else
  {
    changeState(0);
    tournamentActive = false;
  }
  GameTimer.stop();
} //_CODE_:OptionsQuit:451126:

public void difficultyChoiceClick(GDropList source, GEvent event) { //_CODE_:DifficultyList:469325:
} //_CODE_:DifficultyList:469325:

public void playStartButtonClick(GButton source, GEvent event) { //_CODE_:PlayButton:921774:
  //Changes the state to the match and creates a new match
  changeState(1);
  currentMatch = new Match();
} //_CODE_:PlayButton:921774:

public void playBackButtonClick(GButton source, GEvent event) { //_CODE_:BackButton:785490:
  //Takes you back to the main menu, if you are in a tournament you data is lost
  if (tournamentActive)
  {
    tournamentActive = false;
  }
  changeState(0);
} //_CODE_:BackButton:785490:

public void rulesListClick(GDropList source, GEvent event) { //_CODE_:RulesList:363332:
} //_CODE_:RulesList:363332:

public void numberListClick(GDropList source, GEvent event) { //_CODE_:NumberList:270903:
} //_CODE_:NumberList:270903:

public void tournamentButton(GButton source, GEvent event) { //_CODE_:TournamentButton:773822:
  //Setup and changes the state to a tournament
  tournamentActive = true;
  tournament = new Tournament(4);
  state = 6;
} //_CODE_:TournamentButton:773822:

public void character2Button(GButton source, GEvent event) { //_CODE_:Character2Button:767983:
  //Sets the character sprite and changes the scene to either the tournament screen or custom game screen
  playerCharacter = SpriteV2;
  if (tournamentActive)
  {
    state = 5;
  } else
  {
    state = 3;
  }
} //_CODE_:Character2Button:767983:

public void character1Button(GButton source, GEvent event) { //_CODE_:Character1Button:304397:
  //Sets the character sprite and changes the scene to either the tournament screen or custom game screen
  playerCharacter = SpriteV1;
  if (tournamentActive)
  {
    state = 5;
  } else
  {
    state = 3;
  }
} //_CODE_:Character1Button:304397:

public void character3Button(GButton source, GEvent event) { //_CODE_:Character3Button:869737:
  //Sets the character sprite and changes the scene to either the tournament screen or custom game screen
  playerCharacter = SpriteV3;
  if (tournamentActive)
  {
    state = 5;
  } else
  {
    state = 3;
  }
} //_CODE_:Character3Button:869737:

public void gameTimerAction(GTimer source) { //_CODE_:GameTimer:823381:
  //Triggers when the timer runs out, stops the timer and checks who won
  GameTimer.stop();
  currentMatch.checkWin();
} //_CODE_:GameTimer:823381:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI() {
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  StartButton = new GButton(this, 317, 344, 80, 30);
  StartButton.setText("Custom");
  StartButton.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  StartButton.addEventHandler(this, "startButtonClick");
  QuitButton = new GButton(this, 318, 404, 80, 30);
  QuitButton.setText("Quit");
  QuitButton.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  QuitButton.addEventHandler(this, "titleQuitButtonClick");
  ResumeButton = new GButton(this, 318, 261, 80, 30);
  ResumeButton.setText("Resume");
  ResumeButton.setLocalColorScheme(GCScheme.RED_SCHEME);
  ResumeButton.addEventHandler(this, "resumeButtonClick");
  OptionsQuit = new GButton(this, 318, 374, 80, 30);
  OptionsQuit.setText("Quit");
  OptionsQuit.setLocalColorScheme(GCScheme.RED_SCHEME);
  OptionsQuit.addEventHandler(this, "optionsQuitButtonClick");
  DifficultyList = new GDropList(this, 165, 320, 90, 80, 3, 10);
  DifficultyList.setItems(loadStrings("list_469325"), 0);
  DifficultyList.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  DifficultyList.addEventHandler(this, "difficultyChoiceClick");
  PlayButton = new GButton(this, 647, 450, 80, 30);
  PlayButton.setText("Start");
  PlayButton.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  PlayButton.addEventHandler(this, "playStartButtonClick");
  BackButton = new GButton(this, 11, 456, 80, 30);
  BackButton.setText("Back");
  BackButton.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  BackButton.addEventHandler(this, "playBackButtonClick");
  RulesList = new GDropList(this, 315, 321, 90, 60, 2, 10);
  RulesList.setItems(loadStrings("list_363332"), 0);
  RulesList.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  RulesList.addEventHandler(this, "rulesListClick");
  NumberList = new GDropList(this, 439, 320, 90, 120, 5, 10);
  NumberList.setItems(loadStrings("list_270903"), 0);
  NumberList.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  NumberList.addEventHandler(this, "numberListClick");
  TimerLabel = new GLabel(this, 59, 29, 147, 60);
  TimerLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  TimerLabel.setText("Time:");
  TimerLabel.setLocalColorScheme(GCScheme.RED_SCHEME);
  TimerLabel.setOpaque(false);
  TournamentButton = new GButton(this, 318, 290, 80, 30);
  TournamentButton.setText("Tournament");
  TournamentButton.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  TournamentButton.addEventHandler(this, "tournamentButton");
  Character2Button = new GButton(this, 316, 358, 80, 30);
  Character2Button.setText("Character2");
  Character2Button.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  Character2Button.addEventHandler(this, "character2Button");
  Character1Button = new GButton(this, 167, 360, 81, 30);
  Character1Button.setText("Character 1");
  Character1Button.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  Character1Button.addEventHandler(this, "character1Button");
  Character3Button = new GButton(this, 454, 358, 80, 30);
  Character3Button.setText("Character3");
  Character3Button.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  Character3Button.addEventHandler(this, "character3Button");
  GameTimer = new GTimer(this, this, "gameTimerAction", 9000);
}

// Variable declarations 
// autogenerated do not edit
GButton StartButton; 
GButton QuitButton; 
GButton ResumeButton; 
GButton OptionsQuit; 
GDropList DifficultyList; 
GButton PlayButton; 
GButton BackButton; 
GDropList RulesList; 
GDropList NumberList; 
GLabel TimerLabel; 
GButton TournamentButton; 
GButton Character2Button; 
GButton Character1Button; 
GButton Character3Button; 
GTimer GameTimer; 
